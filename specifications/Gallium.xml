<?xml version="1.0" encoding="utf-8"?>
<signatures>
  <comments>
    <license>
      MIT License

      Copyright (c) 2019 Ultz Limited

      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
    </license>
    <description>
      This file contains the Gallium API specification which all drivers must implement.

      It contains all enums and functions, including those provided by various other
      driver vendors.

      The extension to which a function or enum belongs is defined in its extension
      attribute. An example could be GA_ULTZ_extension_name. The vendor which added
      the extension to the Gallium specification is defined in its vendor attribute.
      In the case of GA_ULTZ_extension_name, the vendor will just be ULTZ.

      Currently, the only vendor is ULTZ, who make the following drivers:
      - Gallium -> DirectX
      - Gallium -> Vulkan
      - Gallium -> OpenGL(ES)
      - Gallium -> Metal
    </description>
  </comments>
  <types>
      <type name="GAIntPtr" comment="An int pointing to an address in memory." />
      <type name="GAInt16" comment="A 16-bit integer." />
      <type name="GAInt32" comment="A 32-bit integer." />
      <type name="GAInt64" comment="A 64-bit integer." />
      <type name="GAUInt16" comment="A 16-bit unsigned integer." />
      <type name="GAUInt32" comment="A 32-bit unsigned integer." />
      <type name="GAUInt64" comment="A 64-bit unsigned integer." />
      <type name="GADebugProc" comment="A function pointer to a debug callback." />
      <type name="GAChar" comment="A character." />
      <type name="GAByte" comment="A byte." />
      <type name="GABool" comment="A boolean - 0 for false, 1 for true." />
      <!--
      
       GADebugProc signature:
       void DebugProc(DebugMessageType type, ErrorType error, GAChar* source, GAChar* message, UInt32 batchId, UInt32 commandId)
       
      -->
  </types>
  <api name="gallium" version="1.0">
    <!-- Diagnostics -->
    <enum name="ErrorType" extension="Core" vendor="ULTZ">
      <token name="GA_NONE" value="0x0000" />
      <token name="GA_INVALID_ENUM_PARAMETER" value="0x0001" />
      <token name="GA_INVALID_VALUE_PARAMETER" value="0x0002" />
      <token name="GA_INVALID_OPERATION" value="0x0003" />
      <token name="GA_STACK_OVERFLOW" value="0x0004" />
      <token name="GA_STACK_UNDERFLOW" value="0x0005" />
      <token name="GA_OUT_OF_MEMORY" value="0x0006" />
      <token name="GA_NOT_IMPLEMENTED" value="0x0007" />
      <token name="GA_UNKNOWN_ERROR" value="0x0008" />
    </enum>
    <enum name="DebugMessageType" extension="Core" vendor="ULTZ">
      <token name="GA_MESSAGE" value="0x0000" />
      <token name="GA_VERBOSE_MESSAGE" value="0x0001" />
      <token name="GA_WARNING" value="0x0002" />
      <token name="GA_ERROR" value="0x0003" />
    </enum>
    <function name="GAGetError" extension="Core" vendor="ULTZ">
      <doc>Gets the result of the previous command.</doc> 
      <param name="additionalMessage" type="GAChar *" flow="out" />
      <returns type="ErrorType" />
    </function>
    <function name="GASetDebugCallback" extension="Core" vendor="ULTZ">
      <doc>Sets a callback that is called when an error, warning, or other message is generated.</doc> 
      <param name="callback" type="GADebugProc" />
      <returns type="void" />
    </function>

    <!-- Commands and Batches -->
    <function name="GABeginBatch" extension="Core" vendor="ULTZ">
      <doc>Prepares a new command batch in which subsequent commands will be captured and stored.</doc> 
      <returns type="GAUInt32" />
    </function>
    <function name="GAFinishBatch" extension="Core" vendor="ULTZ">
      <doc>Finishes the command batch, and adds it to the underlying API's queue.</doc> 
      <param name="batch" type="GAUInt32" />
      <returns type="void" />
    </function>
    <function name="GADestroyBatch" extension="Core" vendor="ULTZ">
      <doc>Destroys the current batch, including the commands captured within it.</doc> 
      <param name="batch" type="GAUInt32" />
      <returns type="void" />
    </function>
    <function name="GASendCommands" extension="Core" vendor="ULTZ">
      <doc>Sends all of the pending batches to the underlying API. This is separate to GAFinishBatch to circumvent any threading requirements the underlying API might have. For example, this must only be called on the thread where an OpenGL context is current (in the case of OpenGL being the underlying API)</doc>
      <param name="batchCount" type="GAUInt32" />
      <param name="batches" type="GAUInt32 *" count="valueof(batchCount)" flow="in" />
      <returns type="void" />
    </function>

    <!-- Underlying API management -->
    <enum name="UnderlyingAPI" extension="Core" vendor="ULTZ">
      <token name="GA_OTHER" value="0x0000" />
      <token name="GA_METAL" value="0x0001" />
      <token name="GA_DIRECTX" value="0x0002" />
      <token name="GA_OPENGL" value="0x0003" />
      <token name="GA_OPENGLES" value="0x0004" />
      <token name="GA_VULKAN" value="0x0005" />
    </enum>
    <function name="GAGetUnderlyingAPI" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <returns type="UnderlyingAPI" />
    </function>
    <!-- TODO add extensions for setting up the underlying context, such as DirectX and its HWNDs -->

    <!-- SPIR-V -->
    <function name="GACompileShader" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <returns type="GAUInt32" />
      <param name="length" type="GAUInt32" />
      <param name="bytes" type="GAByte *" count="valueof(length)" flow="in" />
    </function>
    <function name="GADestroyShader" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="shader" type="GAUInt32" />
      <returns type="void" />
    </function>

    <!-- Loader -->
    <function name="GAGetProcAddress" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="name" type="GAChar *" />
      <returns type="GAIntPtr" />
    </function>
    <function name="GAIsExtensionPresent" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="name" type="GAChar *" />
      <returns type="GABool" />
    </function>
  </api>
</signatures>