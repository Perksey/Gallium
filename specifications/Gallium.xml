<?xml version="1.0" encoding="utf-8"?>
<signatures>
  <comments>
    <license>
      MIT License

      Copyright (c) 2019 Ultz Limited

      Permission is hereby granted, free of charge, to any person obtaining a copy
      of this software and associated documentation files (the "Software"), to deal
      in the Software without restriction, including without limitation the rights
      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      copies of the Software, and to permit persons to whom the Software is
      furnished to do so, subject to the following conditions:

      The above copyright notice and this permission notice shall be included in all
      copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
      SOFTWARE.
    </license>
    <description>
      This file contains the Gallium API specification which all drivers must implement.

      It contains all enums and functions, including those provided by various other
      driver vendors.

      The extension to which a function or enum belongs is defined in its extension
      attribute. An example could be GA_ULTZ_extension_name. The vendor which added
      the extension to the Gallium specification is defined in its vendor attribute.
      In the case of GA_ULTZ_extension_name, the vendor will just be ULTZ.

      Currently, the only vendor is ULTZ, who make the following drivers:
      - Gallium -> DirectX
      - Gallium -> Vulkan
      - Gallium -> OpenGL(ES)
      - Gallium -> Metal

      Gallium creates, modifies, and destroys graphics resources on the underlying
      API through Create*, Update*, and Destroy* functions; the first of which
      returning a unique resource ID that is passed to the latter two functions.
      This resource ID is not unique to the resource type, but is instead unique to
      every resource on the API. For example, a framebuffer and texture will never
      have the same ID.
    </description>
  </comments>
  <types>
      <type name="GAIntPtr" comment="An int pointing to an address in memory." />
      <type name="GAInt16" comment="A 16-bit integer." />
      <type name="GAInt32" comment="A 32-bit integer." />
      <type name="GAInt64" comment="A 64-bit integer." />
      <type name="GAUInt16" comment="A 16-bit unsigned integer." />
      <type name="GAUInt32" comment="A 32-bit unsigned integer." />
      <type name="GAUInt64" comment="A 64-bit unsigned integer." />
      <type name="GADebugProc" comment="A function pointer to a debug callback." />
      <type name="GAChar" comment="A character." />
      <type name="GAByte" comment="A byte." />
      <type name="GABool" comment="A boolean - 0 for false, 1 for true." />
      <type name="GASingle" comment="A single-precision floating-point number." />
      <type name="GADouble" comment="A double-precision floating-point number." />
      <!--
      
       GADebugProc signature:
       void DebugProc(DebugMessageType type, ErrorType error, GAChar* source, GAChar* message, UInt32 batchId, UInt32 commandId)
       
      -->
  </types>
  <api name="gallium" version="1.0">
    <!-- Diagnostics -->
    <enum name="ErrorType" extension="Core" vendor="ULTZ">
      <token name="GA_NONE" value="0x0000">
        <doc>The last operation was successful</doc>
      </token>
      <token name="GA_INVALID_ENUM_PARAMETER" value="0x0001">
        <doc>An invalid enumerant was passed to a parameter.</doc>
      </token>
      <token name="GA_INVALID_VALUE_PARAMETER" value="0x0002">
        <doc>An invalid value was passed to a parameter.</doc>
      </token>
      <token name="GA_INVALID_OPERATION" value="0x0003">
        <doc>An unsupported/invalid operation was attempted.</doc>
      </token>
      <token name="GA_STACK_OVERFLOW" value="0x0004">
        <doc>An attempt was made to push a value onto a full stack.</doc>
      </token>
      <token name="GA_STACK_UNDERFLOW" value="0x0005">
        <doc>An attempt was made to pop a value from an empty stack.</doc>
      </token>
      <token name="GA_OUT_OF_MEMORY" value="0x0006">
        <doc>There wasn't enough memory free to execute the command.</doc>
      </token>
      <token name="GA_NOT_IMPLEMENTED" value="0x0007">
        <doc>The driver has not implemented this function.</doc>
      </token>
      <token name="GA_UNKNOWN_ERROR" value="0x0008">
        <doc>An anomalous error occured. This usually indicates a bug in the driver.</doc>
      </token>
    </enum>
    <enum name="DebugMessageType" extension="Core" vendor="ULTZ">
      <token name="GA_MESSAGE" value="0x0000">
        <doc>Indicates that the debug message is not for an error, but for additional information the developer might need to be aware of.</doc>
      </token>
      <token name="GA_VERBOSE_MESSAGE" value="0x0001">
        <doc>Indicates that the debug message is not for an error, but for additional information the developer might need to be aware of when debugging.</doc>
      </token>
      <token name="GA_WARNING" value="0x0002">
        <doc>Indicates that the debug message is warning the developer.</doc>
      </token>
      <token name="GA_ERROR" value="0x0003">
        <doc>Indicates that the debug message is for an error.</doc>
      </token>
    </enum>
    <function name="GAGetError" extension="Core" vendor="ULTZ">
      <doc>Gets the result of the previous command.</doc> 
      <param name="additionalMessage" type="GAChar*" flow="out" />
      <returns type="ErrorType" />
    </function>
    <function name="GASetDebugCallback" extension="Core" vendor="ULTZ">
      <doc>Sets a callback that is called when an error, warning, or other message is generated.</doc> 
      <param name="callback" type="GADebugProc" />
      <returns type="void" />
    </function>

    <!-- Commands and Batches -->
    <function name="GABeginBatch" extension="Core" vendor="ULTZ">
      <doc>Prepares a new command batch in which subsequent commands will be captured and stored, and makes the batch current on the calling thread. This must not be called if there is already a batch current on this thread.</doc>
      <returns type="void" />
    </function>
    <function name="GAFinishBatch" extension="Core" vendor="ULTZ">
      <doc>Finishes the command batch, and adds it to the underlying API's queue. The thread will no longer have a current batch.</doc>
      <returns type="void" />
    </function>
    <function name="GADestroyBatch" extension="Core" vendor="ULTZ">
      <doc>Destroys the current batch, including the commands captured within it. The thread will no longer have a current batch.</doc>
      <returns type="void" />
    </function>
    <function name="GAExecuteBatch" extension="Core" vendor="ULTZ">
      <doc>Sends the given batch to the underlying API. This function is separate to GAFinishBatch to circumvent any thread restrictions the underlying API might have. For example, this function must only be called on the thread where the OpenGL context is current where the underlying API is OpenGL or OpenGL ES.</doc>
      <param name="batch" type="GAUInt32" />
      <returns type="void" />
    </function>

    <!-- Underlying API management -->
    <enum name="UnderlyingAPI" extension="Core" vendor="ULTZ">
      <token name="GA_OTHER" value="0x0000">
        <doc>The API backing Gallium isn't documented as an enum.</doc>
      </token>
      <token name="GA_NONE" value="0x0001">
        <doc>The API directly accesses the GPU via a specialized driver, and not through another API.</doc>
      </token>
      <token name="GA_METAL" value="0x0002">
        <doc>The API is being powered by the Metal API on iOS or macOS.</doc>
      </token>
      <token name="GA_DIRECTX" value="0x0003">
        <doc>The API is being powered by the DirectX API on a Microsoft platform.</doc>
      </token>
      <token name="GA_OPENGL" value="0x0004">
        <doc>The API is being powered by the OpenGL API on a desktop platform.</doc>
      </token>
      <token name="GA_OPENGLES" value="0x0005">
        <doc>The API is being powered by the OpenGL API on an embedded system.</doc>
      </token>
      <token name="GA_VULKAN" value="0x0006">
        <doc>The API is being powered by the Vulkan API.</doc>
      </token>
      <token name="GA_GNM" value="0x0007">
        <doc>The API is being powered by the GNM API on PlayStation 4.</doc>
      </token>
      <token name="GA_NVN" value="0x0008">
        <doc>The API is being powered by the NVN API on Nintendo Switch.</doc>
      </token>
    </enum>
    <function name="GAGetUnderlyingAPI" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <returns type="UnderlyingAPI" />
    </function>
    <!-- TODO add extensions for setting up the underlying context, such as DirectX and its HWNDs -->

    <!-- SPIR-V -->
    <function name="GACompileShader" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <returns type="GAUInt32" /> <!-- see lines 44-49 -->
      <param name="length" type="GAUInt32" />
      <param name="bytes" type="GAByte*" count="Parameter(length)" flow="in" />
      <param name="stageCount" type="GAUInt32" />
      <param name="stages" type="ShaderStage*" />
      <param name="entryPoint" type="GAChar*" />
    </function>
    <function name="GADestroyShader" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="shader" type="GAUInt32" />
      <returns type="void" />
    </function>

    <!-- Loader -->
    <function name="GAGetProcAddress" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="name" type="GAChar*" />
      <returns type="GAIntPtr" />
    </function>
    <function name="GAIsExtensionPresent" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="name" type="GAChar*" />
      <returns type="GABool" />
    </function>

    <!-- Buffers -->
    <enum name="BufferType" extension="Core" vendor="ULTZ">
      <token name="GA_DYNAMIC" value="0x0000" />
      <token name="GA_INDEX_BUFFER" value="0x0001" />
      <token name="GA_INDIRECT_BUFFER" value="0x0002" />
      <token name="GA_STAGING" value="0x0003" />
      <token name="GA_STRUCTURED_BUFFER_READ_ONLY" value="0x0004" />
      <token name="GA_STRUCTURED_BUFFER" value="0x0005" />
      <token name="GA_UNIFORM_BUFFER" value="0x0006" />
      <token name="GA_VERTEX_BUFFER" value="0x0007" />
    </enum>
    <function name="GACreateBuffer" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="capacity" type="GAUInt32" />
      <param name="typeFlags" type="BufferType *" />
      <returns type="GAUInt32" /> <!-- see lines 44-49 -->
    </function>
    <function name="GAUpdateBuffer" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="buffer" type="GAUInt32" />
      <param name="bufferOffset" type="GAUInt32" />
      <param name="source" type="GAIntPtr" />
      <param name="size" type="GAUInt32" />
      <returns type="void" />
    </function>
    <function name="GADestroyBuffer" extension="Core" vendor="ULTZ">
      <doc></doc> 
      <param name="id" type="GAUInt32" />
      <returns type="void" />
    </function>

    <!-- Features -->
    <enum name="FeatureName" extension="Core" vendor="ULTZ">
      <token name="GA_COMPUTE_SHADERS" value="0x0001" />
      <token name="GA_GEOMETRY_SHADERS" value="0x0002" />
      <token name="GA_TESSELLATION_SHADERS" value="0x0003" />
      <token name="GA_MULTIPLE_VIEWPORTS" value="0x0004" />
    </enum>
    <function name="GAIsFeatureSupported" extension="Core" vendor="ULTZ">
      <doc></doc>
      <param name="feature" type="FeatureName" />
      <returns type="GABool" />
    </function>

    <!-- Blending/Stencil/Rasterizer -->
    <enum name="FaceCullMode" extension="Core" vendor="ULTZ">
      <token name="GA_NONE" value="0x0000" />
      <token name="GA_BACK" value="0x0001" />
      <token name="GA_FRONT" value="0x0002" />
    </enum>
    <enum name="ComparisonKind" extension="Core" vendor="ULTZ">
      <token name="GA_ALWAYS_TRUE" value="0x0000" />
      <token name="GA_ALWAYS_FALSE" value="0x0001" />
      <token name="GA_EQUAL" value="0x0002" />
      <token name="GA_NOT_EQUAL" value="0x0003" />
      <token name="GA_GREATER_THAN" value="0x0004" />
      <token name="GA_GREATER_THAN_OR_EQUAL" value="0x0005" />
      <token name="GA_LESS_THAN" value="0x0006" />
      <token name="GA_LESS_THAN_OR_EQUAL" value="0x0007" />
    </enum>
    <enum name="PolygonFillMode" extension="Core" vendor="ULTZ">
      <token name="GA_COMPLETE" value="0x0000" />
      <token name="GA_OUTLINE" value="0x0001" />
    </enum>
    <enum name="BlendFactor" extension="Core" vendor="ULTZ">
      <token name="GA_BLEND_FACTOR" value="0x0000" />
      <token name="GA_DESTINATION_ALPHA" value="0x0001" />
      <token name="GA_DESTINATION_COLOR" value="0x0002" />
      <token name="GA_SOURCE_ALPHA" value="0x0003" />
      <token name="GA_SOURCE_COLOR" value="0x0004" />
      <token name="GA_INVERSE_BLEND_FACTOR" value="0x0005" />
      <token name="GA_INVERSE_DESTINATION_ALPHA" value="0x0006" />
      <token name="GA_INVERSE_DESTINATION_COLOR" value="0x0007" />
      <token name="GA_INVERSE_SOURCE_ALPHA" value="0x0008" />
      <token name="GA_INVERSE_SOURCE_COLOR" value="0x0009" />
      <token name="GA_ONE" value="0x000A" />
      <token name="GA_ZERO" value="0x000B" />
    </enum>
    <enum name="BlendFunction" extension="Core" vendor="ULTZ">
      <token name="GA_ADD" value="0x0000" />
      <token name="GA_SUBTRACT" value="0x0001" />
      <token name="GA_SUBTRACT_REVERSE" value="0x0002" />
      <token name="GA_MIN" value="0x0003" />
      <token name="GA_MAX" value="0x0004" />
    </enum>
    <enum name="FrontFace" extension="Core" vendor="ULTZ">
      <token name="GA_CLOCKWISE" value="0x0000" />
      <token name="GA_ANTICLOCKWISE" value="0x0001" />
    </enum>
    <enum name="PrimitiveTopology" extension="Core" vendor="ULTZ">
      <token name="GA_TRIANGLES" value="0x0000" />
      <token name="GA_CONNECTED_TRIANGLES" value="0x0001" />
      <token name="GA_LINES" value="0x0002" />
      <token name="GA_CONNECTED_LINES" value="0x0003" />
      <token name="GA_POINTS" value="0x0004" />
    </enum>
    <enum name="PixelFormat" extension="Core" vendor="ULTZ">
        <!-- Suffixes:
            _N: Normalised
            _U: Unsigned
        -->
        <token name="GA_B8_G8_R8_A8_U_N" value="0x0000" />
        <token name="GA_R8_U_N" value="0x0001" />
        <token name="GA_R16_U_N" value="0x0002" />
        <token name="GA_R32_G32_B32_A32_SINGLE" value="0x0003" />
        <token name="GA_R32_SINGLE" value="0x0004" />
        <token name="GA_BC3_U_N" value="0x0005" />
        <token name="GA_D24_U_N_S8_U" value="0x0006" />
        <token name="GA_D32_SINGLE_S8_U" value="0x0007" />
        <token name="GA_R32_G32_B32_A32_U" value="0x0008" />
        <token name="GA_R8_G8_N" value="0x0009" />
        <token name="GA_BC1_RGB_U_N" value="0x000A" />
        <token name="GA_BC1_RGBA_U_N" value="0x000B" />
        <token name="GA_BC2_U_N" value="0x000C" />
        <token name="GA_R10_G10_B10_A2_U_N" value="0x000D" />
        <token name="GA_R10_G10_B10_A2_U" value="0x000E" />
        <token name="GA_R11_G11_B10_SINGLE" value="0x000F" />
        <token name="GA_R8_N" value="0x0010" />
        <token name="GA_R8_U" value="0x0011" />
        <token name="GA_R8" value="0x0012" />
        <token name="GA_R16_N" value="0x0013" />
        <token name="GA_R16_U" value="0x0014" />
        <token name="GA_R16" value="0x0015" />
        <token name="GA_R16_SINGLE" value="0x0016" />
        <token name="GA_R32_U" value="0x0017" />
        <token name="GA_R32" value="0x0018" />
        <token name="GA_R8_G8_U_N" value="0x0019" />
        <token name="GA_R8_G8_U" value="0x001A" />
        <token name="GA_R8_G8" value="0x001B" />
        <token name="GA_R16_G16_U_N" value="0x001C" />
        <token name="GA_R16_G16_N" value="0x001D" />
        <token name="GA_R16_G16_U" value="0x001E" />
        <token name="GA_R16_G16" value="0x001F" />
        <token name="GA_R16_G16_SINGLE" value="0x0020" />
        <token name="GA_R32_G32_U" value="0x0021" />
        <token name="GA_R32_G32" value="0x0022" />
        <token name="GA_R32_G32_SINGLE" value="0x0023" />
        <token name="GA_R8_G8_B8_A8_N" value="0x0024" />
        <token name="GA_R8_G8_B8_A8_U" value="0x0025" />
        <token name="GA_R8_G8_B8_A8" value="0x0026" />
        <token name="GA_R16_G16_B16_A16_U_N" value="0x0027" />
        <token name="GA_R16_G16_B16_A16_N" value="0x0028" />
        <token name="GA_R16_G16_B16_A16_U" value="0x0029" />
        <token name="GA_R16_G16_B16_A16" value="0x002A" />
        <token name="GA_R16_G16_B16_A16_SINGLE" value="0x002B" />
        <token name="GA_R32_G32_B32_A32" value="0x002C" />
        <token name="GA_ETC2_R8_G8_B8_U_N" value="0x002D" />
        <token name="GA_ETC2_R8_G8_B8_A1_U_N" value="0x002E" />
        <token name="GA_ETC2_R8_G8_B8_A8_U_N" value="0x002F" />
        <token name="GA_BC4_U_N" value="0x0030" />
        <token name="GA_BC4_N" value="0x0031" />
        <token name="GA_BC5_U_N" value="0x0032" />
        <token name="GA_BC5_N" value="0x0033" />
        <token name="GA_BC7_U_N" value="0x0034" />
        <token name="GA_R8_G8_B8_A8_U_N_SRGB" value="0x0035" />
        <token name="GA_B8_G8_R8_A8_U_N_SRGB" value="0x0036" />
        <token name="GA_BC1_RGB_U_N_SRGB" value="0x0037" />
        <token name="GA_BC1_RGBA_U_N_SRGB" value="0x0038" />
        <token name="GA_BC2_U_N_SRGB" value="0x0039" />
        <token name="GA_BC3_U_N_SRGB" value="0x003A" />
        <token name="GA_BC7_U_N_SRGB" value="0x003B" />
    </enum>

    <!-- Pipeline Management -->
    <function name="GASetPipeline" extension="Core" vendor="ULTZ">
      <doc>Makes the given pipeline current.</doc>
      <param name="pipeline" type="GAUInt32"/>
      <returns type="void" />
    </function>
    <!-- TODO add graphics device functionality, add back in the following function -->
    <!--<function name="GAGetMainPipeline" extension="Core" vendor="ULTZ">
      <doc>Gets the ID of the main pipeline.</doc>
      <returns type="GAUInt32" />
    </function>-->
    <function name="GACreatePipeline" extension="Core" vendor="ULTZ">
      <!-- Blend State -->
      <param name="blendFactorRGBA" type="GASingle*" count="Value(4)" />
      <param name="blendDescriptionCount" type="GAUInt32">
      <param name="blendEnabled" type="GABool*" count="Parameter(blendDescriptionCount)" />
      <param name="sourceColorFactor" type="BlendFactor*" count="Parameter(blendDescriptionCount)" />
      <param name="destinationColorFactor" type="BlendFactor*" count="Parameter(blendDescriptionCount)" />
      <param name="colorFunction" type="BlendFunction*" count="Parameter(blendDescriptionCount)" />
      <param name="sourceAlphaFactor" type="BlendFactor*" count="Parameter(blendDescriptionCount)" />
      <param name="destinationAlphaFactor" type="BlendFactor*" count="Parameter(blendDescriptionCount)" />
      <param name="alphaFunction" type="BlendFunction*" count="Parameter(blendDescriptionCount)" />

      <!-- Depth Stencil -->
      <param name="depthTestEnabled" type="GABool" />
      <param name="depthWriteEnabled" type="GABool" />
      <param name="comparisonKind" type="ComparisonKind" />

      <!-- Rasterizer -->
      <param name="cullMode" type="FaceCullMode" />
      <param name="fillMode" type="PolygonFillMode" />
      <param name="frontFace" type="FrontFace" />
      <param name="depthClipEnabled" type="GABool" />
      <param name="scissorTestEnabled" type="GABool" />
      <param name="primitiveTopology" type="PrimitiveTopology" />

      <!-- Output Description -->
      <param name="depthAttachment" type="PixelFormat" nullable="true"/>
      <param name="colorAttachmentCount" type="GAUInt32"/>
      <param name="colorAttachments" type="PixelFormat*" count="Parameter(colorAttachmentCount)"/>
      <returns type="GAUInt32" /> <!-- see lines 44-49 -->
    </function>
    <function name="GACreatePipelineAttachment" extension="Core" vendor="ULTZ">
      <param name="pipeline" type="GAUInt32" />
      <param name="layoutCount" type="GAUInt32" /><!-- vertex layouts -->
      <param name="layouts" type="GAUInt32*" />
      <param name="shaderCount" type="GAUInt32" />
      <param name="shaders" type="GAUInt32*" />
      <returns type="GAUInt32" /> <!-- see lines 44-49 -->
    </function>
    <function name="GADestroyPipelineAttachment" extension="Core" vendor="ULTZ">
      <param name="attachment" type="GAUInt32" />
      <returns type="void" />
    </function>

    <!-- Vertices -->
    <enum name="VertexElementSemantic" extension="Core" vendor="ULTZ">
      <token name="GA_COLOR" value="0x0000" />
      <token name="GA_NORMAL" value="0x0001" />
      <token name="GA_POSITION" value="0x0002" />
      <token name="GA_TEX_COORD" value="0x0003" />
    </enum>
    <enum name="VertexElementFormat" extension="Core" vendor="ULTZ">
        <!-- Suffixes:
            _N: Normalised
            _U: Unsigned
        -->
        <token name="GA_SINGLE_1" value="0x0000" />
        <token name="GA_SINGLE_2" value="0x0001" />
        <token name="GA_SINGLE_3" value="0x0002" />
        <token name="GA_SINGLE_4" value="0x0003" />
        <token name="GA_BYTE_2_U_N" value="0x0004" />
        <token name="GA_BYTE_2_U" value="0x0005" />
        <token name="GA_BYTE_4_U_N" value="0x0006" />
        <token name="GA_BYTE_4_U" value="0x0007" />
        <token name="GA_BYTE_2_N" value="0x0008" />
        <token name="GA_BYTE_2" value="0x0009" />
        <token name="GA_BYTE_4_N" value="0x000A" />
        <token name="GA_BYTE_4" value="0x000B" />
        <token name="GA_INT16_2_U_N" value="0x000C" />
        <token name="GA_INT16_2_U" value="0x000D" />
        <token name="GA_INT16_4_U_N" value="0x000E" />
        <token name="GA_INT16_4_U" value="0x000F" />
        <token name="GA_INT16_2_N" value="0x0010" />
        <token name="GA_INT16_2" value="0x0011" />
        <token name="GA_INT16_4_N" value="0x0012" />
        <token name="GA_INT16_4" value="0x0013" />
        <token name="GA_INT32_1_U" value="0x0014" />
        <token name="GA_INT32_2_U" value="0x0015" />
        <token name="GA_INT32_3_U" value="0x0016" />
        <token name="GA_INT32_4_U" value="0x0017" />
        <token name="GA_INT32_1" value="0x0018" />
        <token name="GA_INT32_2" value="0x0019" />
        <token name="GA_INT32_3" value="0x001A" />
        <token name="GA_INT32_4" value="0x001B" />
        <token name="GA_HALF_1" value="0x001C" />
        <token name="GA_HALF_2" value="0x001D" />
        <token name="GA_HALF_3" value="0x001E" />
        <token name="GA_HALF_4" value="0x001F" />
    </enum>
    <function name="GACreateVertexLayout" extension="Core" vendor="ULTZ">
      <param name="stride" type="GAUInt32" />
      <param name="instanceStepRate" type="GAUInt32" />
      <param name="elementCount" type="GAUInt32" />
      <param name="elementNames" type="GAChar**" count="Parameter(elementCount)" />
      <param name="elementSemantics" type="VertexElementSemantic*" count="Parameter(elementCount)" />
      <param name="elementFormats" type="VertexElementFormat*" count="Parameter(elementCount)" />
      <returns type="GAUInt32" />
    </function>
    <function name="GADestroyVertexLayout" extension="Core" vendor="ULTZ">
      <param name="layout" type="GAUInt32" />
      <returns type="void" />
    </function>

    <!-- Resource Sets -->
    <enum name="ShaderStage">
        <token name="GA_NONE" value="0x0000" />
        <token name="GA_COMPUTE_SHADER" value="0x0001" />
        <token name="GA_PIXEL_SHADER" value="0x0002" />
        <token name="GA_GEOMETRY_SHADER" value="0x0003" />
        <token name="GA_TESSELLATION_CONTROL_STAGE" value="0x0004" />
        <token name="GA_TESSELLATION_EVAL_STAGE" value="0x0005" />
        <token name="GA_VERTEX_SHADER" value="0x0006" />
    </enum>
    <function name="GACreateResourceSet" extension="Core" vendor="ULTZ">
      <param name="layout" type="GAUInt32" /><!-- resource layout -->
      <param name="resourceCount" type="GAUInt32" />
      <param name="resources" type="GAUInt32*" /><!-- any bindable resource -->
      <returns type="GAUInt32" />
    </function>
    <function name="GACreateResourceLayout" extension="Core" vendor="ULTZ">
      <param name="kind" type="ResourceKind" />
      <param name="stageCount" type="GAUInt32" />
      <param name="stages" type="ShaderStage*" count="Parameter(stageCount)" />
      <returns type="GAUInt32" />
    </function>
    <function name="GADestroyResourceSet" extension="Core" vendor="ULTZ">
      <param name="set" type="GAUInt32" />
      <returns type="void" />
    </function>
    <function name="GADestroyResourceLayout" extension="Core" vendor="ULTZ">
      <param name="layout" type="GAUInt32" />
      <returns type="void" />
    </function>

    <!-- Resource Binding -->
    <enum name="IndexFormat" extension="Core" vendor="ULTZ">
        <token name="GA_INT16_U" value="0x0000" />
        <token name="GA_INT32_U" value="0x0001" />
    </enum>
    <function name="GABindVertexBuffer">
      <param name="slot" type="GAUInt32" />
      <param name="buffer" type="GAUInt32" />
      <param name="bufferOffset" type="GAUInt32" />
      <returns type="void" />
    </function>
    <function name="GABindIndexBuffer">
      <param name="buffer" type="GAUInt32" />
      <param name="format" type="IndexFormat" />
      <param name="bufferOffset" type="GAUInt32" />
      <returns type="void" />
    </function>
    <function name="GABindResourceSet">
      <param name="slot" type="GAUInt32" />
      <param name="set" type="GAUInt32" />
      <param name="dynamicOffsetCount" type="GAUInt32" />
      <param name="dynamicOffsets" type="GAUInt32*" count="Parameter(dynamicOffsetCount)" />
      <returns type="void" />
    </function>

    <!-- Drawing -->
    <function name="GADraw">
      <!-- requires bound vertex buffer(s) -->
      <param name="vertexIndex" type="GAUInt32" />
      <param name="vertexCount" type="GAUInt32" />
      <param name="instanceIndex" type="GAUInt32" />
      <param name="instanceCount" type="GAUInt32" />
      <returns type="void" />
    </function>
    <function name="GADrawIndexed">
      <!-- requires bound vertex buffer(s) and bound index buffer(s) -->
      <param name="indexOffset" type="GAUInt32" />
      <param name="indexCount" type="GAUInt32" />
      <param name="vertexOffset" type="GAUInt32" />
      <param name="instanceIndex" type="GAUInt32" />
      <param name="instanceCount" type="GAUInt32" />
      <returns type="void" />
    </function>
  </api>
</signatures>